10 ' REMARQUE LIGNE 10
20 ' REMARQUE LIGNE 200
30 PRINT "PRINT LIGNE 30"


0800	07 0A 00 00 05 D0 00
0807	07 14 00 00 05 D0 01
080F	0A 1E 00 13 A4 26 D0 02 24 25
0818	00
----
0819	31 08 0B 00 D0 00
081F	18 REMARQUE LIGNE 10

0831	4A 08 0B 00 D0 01
083F	19 REMARQUE LIGNE 200

084A	5F 08 10 00 D0 02
0850	15 PRINT LIGNE 30

085F	2A 00 00 00

=========
1000 PRINT A

...
0818	0A E8 03 13 A4 26 D0 03 24 25
0822	00
----
0823	38 08 0B 00 D0 00
0829	18 REMARQUE LIGNE 10

083B	54 08 0B 00 D0 01
0841	19 REMARQUE LIGNE 200
0854	69 08 10 00 D0 02

085A	15 PRINT LIGNE 30
0869	76 08 09 00 D0 03 08 41 00 00 00 00 00

0876	56 00 00 00 D0 04 00 00 00

=========
1010 FOR I=1 TO 10:PRINT "I=";I:NEXT

0822	1C F2 03 41 08 D0 0B 2C D0 04 30 B2 D0 05 3A 20 A4 26 D0 0C 24 23 D0 0B
083A	24 25 20 0D 00
----
083F	57 08 0B D0 00
0845	18 REMARQUE...
...
0892	9C 08 11 00 D0 04 08 31 01 00
089C	A7 08 11 00 D0 05 09 31 30 0A 00
08A7	B4 08 08 00 D0 0B 08 49 00 00 00 00 00
08B4	BD 08 10 00 D0 0C 09 49 3D
08B5	E1 00 00 00 D0 0D


Variables numeriques codées sur 5 octets
$07f9-07fa: Adresse de début du programme compilé ($96FF)
$07fb-07fc: Adresse ram maximale ($9800 si RELEASE, $B400 si GRAB)
$07fd-07fe: Adresse de début des variables (fin du source BASIC)?
$005c-005d: Adresse de début du programme BASIC ($0800)
$005e-005f: Adresse de fin du programme BASIC???(Début des variables directes??? $08c3)



===========
10 PRINT "TOTO"

0800	0A 0A 00 13 A4 26 D0 00 24 25 00
080B	16 08 10 00 D0 00 0B TOTO
0816	00 00 00

96EC	JSR $D507	<-- Indique le début d'une ligne BASIC
	0A 00		<-- N° de la ligne BASIC
	JSR $E4ED
	JSR $D368
	0B 08		<-- Adresse de la chaine "TOTO"
	JSR $E95F
	JSR $E50D
	RTS

=========
10 A=1
20 PRINT A

        +------------------------------> Offset vers la ligne suivante (longueur de la ligne)
        |  +---+-----------------------> N° de ligne
        |  |   |  +--------------------> Longueur du code machine
        |  |   |  | +---------------+--> Instructions
        |  |   |  | |               |
0800	0A 0A 00 12 AA D0 00 2C D0 01
080A	0A 14 00 13 A4 26 D0 00 24 25
0814	00

Variables du programme:
        +---+------------------------------------> Adresse variable suivante
        |   | +---+------------------------------> Type de variable
        |   | |   | +---+------------------------> Code de la variable (correspond à ce qui est dans le programme source)
        |   | |   | |   | +----------------------> Longueur du nom +7
        |   | |   | |   | |  +-------------------> Nom de la variable
        |   | |   | |   | |  |  +------------+---> Valeur
        |   | |   | |   | |  |  |            |
0815	22 08 09 00 D0 00 08 41 01 00 00 00 00
0822	2C 08 11 00 D0 01 08 31 01 00
082C	39 08 07 00 D0 02 09 31 30 0A 00 DA 96
0839	9A 00 00 00

96DA	JSR $D507	<-- Ligne 10
	0A 00
	JSR $D268
	15 08		<-- A
	JSR $D368
	22 08		<-- 1
	JSR $D28F

	JSR $D507	<-- Ligne 20
	14 00
	JSR $E4ED
	JSR $D368
	15 08		<-- A
	JSR $E95F
	JSR $E50D

	RTS

=========
10 GOSUB LABEL
20 END
30 ]LABEL
40   PRINT "LABEL"
50 RETURN


        +------------------------------> Offset vers la ligne suivante (longueur de la ligne)
        |  +---+-----------------------> N° de ligne
        |  |   |  +--------------------> Longueur du code machine
        |  |   |  | +---------------+--> Instructions
        |  |   |  | |               |
0800	07 0A 00 0B A2 D0 00
0807	05 14 00 08 03
080C	07 1E 00 00 00 D0 00
0813	0A 28 00 13 A4 26 D0 01 24 25
081D	05 32 00 08 01
0822	00



Variables du programme:
        +---+------------------------------------> Adresse variable suivante
        |   | +---+------------------------------> Type de variable
        |   | |   | +---+------------------------> Code de la variable (correspond à ce qui est dans le programme source)
        |   | |   | |   | +----------------------> Longueur du nom +7
        |   | |   | |   | |  +------------+------> Nom de la variable
        |   | |   | |   | |  |            | +---------+---> Valeur
        |   | |   | |   | |  |            | |         |
0823	33 08 06 00 D0 00 0C 4C 41 42 45 4C 1E 00 E4 96
0833	3F 08 10 00 D0 01 0C 4C 41 42 45 4C
083F	0F 00 00 00


96D1	JSR $D507	<-- Ligne 10
	0A 00
	JSR $E8CB
	JSR $96E4

	JSR $D507	<-- Ligne 20
	14 00
	JMP $C068

96E4	JSR $D507	<-- Ligne 40
	28 00
	JSR $E4ED
	JSR $D368
	33 08
	JSR $E95F
	JSR $E50D

	JSR $D507	<-- Ligne 50
	32 00
	JMP $DFD5

	RTS
	23 08

=========
10 GOTO 30
20 PRINT "20"
30 PRINT 30

0800	07 0A 00 03 A1 D0 00
0807	0A 14 00 13 A4 25 D0 01 24 25
0811	0A 1E 00 13 A4 26 D0 02 24 25
081B	00

Variables du programme:
081C	29 08 07 00 D0 00 09 33 30 1E 00 EC 96
0829	32 08 10 00 D0 01 09 32 30
0832	3D 08 11 00 D0 02 09 33 30 1E 00
083D	0A 00 00 00

96D6	JMP $96EC
	JSR $D507
	14 00
	JSR $E4ED
	JSR $D368
	29 08
	JSR $E95F
	JSR $E50D
	JSR $D507
	1E 00
	JSR $E4ED
	JSR $D368
	32 00
	JSR $E95F
	JSR $E50D
	RTS
	1C 08

=========
10 DIM A(5)
20 DIM B$(5)

        +---------------------------------------> Offset vers la ligne suivante (longueur de la ligne)
        |  +---+--------------------------------> N° de ligne
        |  |   |  +-----------------------------> Longueur du code machine
        |  |   |  | +------------------------+--> Instructions
        |  |   |  | |                        |
0800	0D 0A 00 00 C0 CC D0 00 2D D0 01 2E 3D
080D	0D 14 00 00 C0 CC D0 02 2D D0 01 2E 3D
081A	00


        +---+------------------------------------> Adresse variable suivante
        |   | +---+------------------------------> Type de variable
        |   | |   | +---+------------------------> Code de la variable (correspond à ce qui est dans le programme source)
        |   | |   | |   | +----------------------> Longueur du nom +7
        |   | |   | |   | |  +-------------------> Nom de la variable
        |   | |   | |   | |  |  +-------+---> Valeur
        |   | |   | |   | |  |  |       |
081B	25 08 0D 00 D0 00 08 41 00 00
0825	2F 08 11 00 D0 01 08 35 05 00
082F	3A 08 0C 00 D0 02 09 42 24 00 00
083A	0D 00 00 00 D0 03

=========
10 A=B(0)
20 B(1)=A


        +---------------------------------------------> Offset vers la ligne suivante (longueur de la ligne)
        |  +---+--------------------------------------> N° de ligne
        |  |   |  +-----------------------------------> Longueur du code machine
        |  |   |  | +------------------------------+--> Instructions
        |  |   |  | |                              |
0800	0F 0A 00 1A AA D0 00 2C D0 01 2D D0 02 E2 3D
080F	0F 14 00 1A AA D0 01 2D D0 03 2E 3D 2C D0 00
081E	00


        +---+------------------------------------> Adresse variable suivante
        |   | +---+------------------------------> Type de variable
        |   | |   | +---+------------------------> Code de la variable (correspond à ce qui est dans le programme source)
        |   | |   | |   | +----------------------> Longueur du nom +7
        |   | |   | |   | |  +-------------------> Nom de la variable
        |   | |   | |   | |  |  +------------+---> Valeur
        |   | |   | |   | |  |  |            |
081F	2C 08 09 40 D0 00 08 41 00 00 00 00 00
082C	6D 08 0D 40 D0 01 08 42 0B 00 00 00 00
...	00 ...
086D	77 08 11 00 D0 02 08 30 00 00
0877	81 08 11 00 D0 03 08 31 01 00
0881	46 00 00 00

96CB	JSR $D507	<-- Ligne 10
	0A 00

	JSR $D268
	1F 08		<-- A

	JSR $D05F
	2C 08		<-- B()

	JSR $D368
	6D 08		<-- 0

	JSR $D086	<-- Récupère la valeur de B(0)

	JSR $D28F	<-- = (Affectation)


	JSR $D507	<-- Ligne 20
	14 00

	JSR $D05F
	2C 08		<-- B()

	JSR $D368
	77 08		<-- 1
	JSR $D088	<-- Récupère l'adresse de B(1)

	JSR $D368
	1F 08		<-- A
	JSR $D28F	<-- = (Affectation)

	RTS
	1F 08

=========
10 A=1
20 B(A)=C

        +------------------------------> Offset vers la ligne suivante (longueur de la ligne)
        |  +---+-----------------------> N° de ligne
        |  |   |  +--------------------> Longueur du code machine
        |  |   |  | +---------------+--> Instructions
        |  |   |  | |               |
0800	0A 0A 00 12 AA D0 00 2C D0 01
080A	0F 14 00 1A AA D0 02 2D D0 00 2E 3D 2C D0 03
0819	00

        +---+------------------------------------> Adresse variable suivante
        |   | +---+------------------------------> Type de variable
        |   | |   | +---+------------------------> Code de la variable (correspond à ce qui est dans le programme source)
        |   | |   | |   | +----------------------> Longueur du nom +7
        |   | |   | |   | |  +-------------------> Nom de la variable
        |   | |   | |   | |  |  +------------+---> Valeur
        |   | |   | |   | |  |  |            |
081A	27 08 09 00 D0 00 04 41 00 00 00 00 00
0827	31 08 11 00 D0 01 08 31 01 00
0831	72 08 0D 03 D0 02 08 42 0B 00 00 00 00
...	00 ...
0872	7F 08 09 00 D0 03 08 43 00 00 00 00 00
087F	46 00 00 00


96D3	JSR $D507	<-- Ligne 10
	0A 00

	JSR $D268	<-- Récupère l'adresse de...
	1A 08		<-- A

	JSR $D368	<-- Récupère la valeur de...
	27 08		<-- 1

	JSR $D28F	<-- = (Affectation)


	JSR $D507	<-- Ligne 20
	14 00

	JSR $D05F	<- Récupère l'adresse de...
	31 08		<-- B()
	JSR $D368	<-- Récupère la valeur de..
	1A 08		<-- A
	JSR $D088	<-- Récupère l'adresse de B(A)

	JSR $D368	<-- Récupère la valeur de...
	72 08		<-- C
	JSR $D28F	<-- = (Affectation)
	RTS
	1A 08

=========
Types variables:
06 00: Label
        +---+------------------------------------> Chainage vers variable suivante
        |   | +---+------------------------------> Type de variable (2nd octet à 3 si non défini)
        |   | |   | +---+------------------------> Code de la variable (correspond à ce qui est dans le programme source)
        |   | |   | |   | +----------------------> Longueur du label +7
        |   | |   | |   | |  +------------+------> Nom du label
        |   | |   | |   | |  |            | +---+---------> N° de ligne en binare (00 00 si non défini)
        |   | |   | |   | |  |            | |   | +---+---> Adresse de la routine (00 00 si non défini)
        |   | |   | |   | |  |            | |   | |   |
	33 08 06 00 D0 00 0C 4C 41 42 45 4C 1E 00 E4 96


07 00: N° de ligne
        +---+------------------------------------> Chainage vers variable suivante
        |   | +---+------------------------------> Type de variable
        |   | |   | +---+------------------------> Code de la variable (correspond à ce qui est dans le programme source)
        |   | |   | |   | +----------------------> Longueur du n° de ligne en ASCII +7
        |   | |   | |   | |  +------------+------> N° de ligne en ASCII
        |   | |   | |   | |  |   | +---+---------> N° de ligne en binaire
        |   | |   | |   | |  |   | |   | +---+---> Adresse de la routine
        |   | |   | |   | |  |   | |   | |   |
	29 08 07 00 D0 00 09 33 30 1E 00 EC 96


08 80: Variable alpha (AB$="STRING")
        +---+---------------------------------------------------> Chainage vers variable suivante
        |   | +---+---------------------------------------------> Type
        |   | |   | +---+---------------------------------------> Code de la variable
        |   | |   | |   | +-------------------------------------> Longueur du nom de la variable +7
        |   | |   | |   | |  +------+---------------------------> Nom du tableau (AB$)
        |   | |   | |   | |  |      | +------+------------------> Valeur (1 octet longueur de la chaine, 2 pour l'adresse réelle de la chaine), les autres éléments sont à la suite
        |   | |   | |   | |  |      | |      |
	0E 08 08 80 D0 00 0A 41 42 24 06 15 08


09 00: Variable numérique (AB=1)
        +---+---------------------------------------------------> Chainage vers variable suivante
        |   | +---+---------------------------------------------> Type
        |   | |   | +---+---------------------------------------> Code de la variable
        |   | |   | |   | +-------------------------------------> Longueur du nom de la variable +7
        |   | |   | |   | |  +---+------------------------------> Nom du tableau (AB$)
        |   | |   | |   | |  |   | +------------+---------------> Valeur (LSB en premier)
        |   | |   | |   | |  |   | |            |
	0F 08 09 00 D0 00 09 41 42 01 00 00 00 00


09 40: Variable numérique flottante (AB=65536)
        +---+---------------------------------------------------> Chainage vers variable suivante
        |   | +---+---------------------------------------------> Type
        |   | |   | +---+---------------------------------------> Code de la variable
        |   | |   | |   | +-------------------------------------> Longueur du nom de la variable +7
        |   | |   | |   | |  +---+------------------------------> Nom du tableau (AB$)
        |   | |   | |   | |  |   | +------------+---------------> Valeur (flottant)
        |   | |   | |   | |  |   | |            |
	0F 08 09 40 D0 00 09 41 42 91 00 00 00 00


10 00: Constante alpha ("STRING")
        +---+---------------------------------------------------> Chainage vers variable suivante
        |   | +---+---------------------------------------------> Type
        |   | |   | +---+---------------------------------------> Code de la variable
        |   | |   | |   | +-------------------------------------> Longueur de la variable +7
        |   | |   | |   | |  +---------------+------------------> Chaine
        |   | |   | |   | |  |               |
	1B 08 10 00 D0 01 0D 53 54 52 49 4E 47


11 00: Constante numérique (valeur sur 2 octets, LSB en premier)
        +---+---------------------------------------------------> Chainage vers variable suivante
        |   | +---+---------------------------------------------> Type
        |   | |   | +---+---------------------------------------> Code de la variable
        |   | |   | |   | +-------------------------------------> Longueur du nom de la variable +7
        |   | |   | |   | |  +----------------------------------> Nom de la constante ("1")
        |   | |   | |   | |  |  +---+---------------------------> Valeur
        |   | |   | |   | |  |  |   |
	19 08 11 00 D0 01 08 31 01 00

	Peut aussi être une valeur binaire (%1010 par exemple)
        +---+---------------------------------------------------> Chainage vers variable suivante
        |   | +---+---------------------------------------------> Type
        |   | |   | +---+---------------------------------------> Code de la variable
        |   | |   | |   | +-------------------------------------> Longueur du nom de la variable +7
        |   | |   | |   | |  +------------+---------------------> Nom de la constante ("%1010")
        |   | |   | |   | |  |            | +---+---------------> Valeur
        |   | |   | |   | |  |            | |   |
	1C 08 11 00 D0 01 0C 25 31 30 31 30 0A 00

	Peut aussi être une valeur hexa (#10 par exemple)
        +---+---------------------------------------------------> Chainage vers variable suivante
        |   | +---+---------------------------------------------> Type
        |   | |   | +---+---------------------------------------> Code de la variable
        |   | |   | |   | +-------------------------------------> Longueur du nom de la variable +7
        |   | |   | |   | |  +------+---------------------------> Nom de la constante ("#10")
        |   | |   | |   | |  |      | +---+---------------------> Valeur
        |   | |   | |   | |  |      | |   |
	1A 08 11 00 D0 01 0A 23 31 30 10 00

12 00: Constante numérique >65535 (flottant sur 5 octets)
        +---+---------------------------------------------------> Chainage vers variable suivante
        |   | +---+---------------------------------------------> Type
        |   | |   | +---+---------------------------------------> Code de la variable
        |   | |   | |   | +-------------------------------------> Longueur du nom de la variable +7
        |   | |   | |   | |  +------------+---------------------> Nom du tableau (AB$)
        |   | |   | |   | |  |            | +------------+------> Valeur (flottant)
        |   | |   | |   | |  |            | |            |
	20 08 12 00 D0 01 0C 36 35 35 33 36 91 00 00 00 00


0C 03: Tableau alpha non dimensionné

0C 80: Tableau alpha dimensionné (on a fait AB$(0)="STRING" sans avoir fait un DIM préalable par exemple, dimensionnement par défaut utilisé)
        +---+---------------------------------------------------> Chainage vers variable suivante
        |   | +---+---------------------------------------------> Type
        |   | |   | +---+---------------------------------------> Code de la variable
        |   | |   | |   | +-------------------------------------> Longueur du nom du tableau +7
        |   | |   | |   | |  +------+---------------------------> Nom du tableau (AB$)
        |   | |   | |   | |  |      | +---+---------------------> Nombre d'éléments du tableau+1 (11 pour un DIM AB(10) ou DIM AB(5))
        |   | |   | |   | |  |      | |   | +------+------------> Valeur élément 0 (1 octet longueur de la chaine, 2 pour l'adresse réelle de la chaine), les autres éléments sont à la suite
        |   | |   | |   | |  |      | |   | |      |
	2E 08 0C 80 D0 00 0A 41 42 24 0B 00 06 4A 08

	Les chaines du tableau sont stockées comme des constantes alpha ("STRING") mais dans le tableau on pointe directement sur le début de la chaine:
              +---+---------------------------------------------------> Chainage vers variable suivante
              |   | +---+---------------------------------------------> Type
              |   | |   | +---+---------------------------------------> Code de la variable
              |   | |   | |   | +-------------------------------------> Longueur de la variable +7
              |   | |   | |   | |  +---------------+------------------> Chaine (début en $084A)
              |   | |   | |   | |  |               |
	0843: 50 08 10 00 D0 03 0D 53 54 52 49 4E 47


0D 03: Tableau numérique non dimensionné (dimension minimale 10 même si on a fait DIM AB(5))

0D 00: Tableau numérique dimensionné (dimension par défaut 10)
        +---+---------------------------------------------------> Chainage vers variable suivante
        |   | +---+---------------------------------------------> Type
        |   | |   | +---+---------------------------------------> Code de la variable
        |   | |   | |   | +-------------------------------------> Longueur du nom du tableau +7
        |   | |   | |   | |  +---+------------------------------> Nom du tableau (AB)
        |   | |   | |   | |  |   | +---+------------------------> Nombre d'éléments du tableau +1 (11 pour un DIM AB(10) ou DIM AB(5))
        |   | |   | |   | |  |   | |   | +------------+---------> Valeur élément 0 (flottant sur 5 octets), les autres éléments sont à la suite
        |   | |   | |   | |  |   | |   | |            |
	08 43 0D 00 D0 00 09 41 42 0B 00 81 00 00 00 00 ...

=========
Table des instructions:
	_lfa: pointeur vers le lfa du mot suivant (fin de la table si le MSB =
0)
	_type: 1 -> Commande, 2-> Constante/Fonction, 3-> Opérateur logique ou
arithmétique
	_sous_type:
		si type == $01: $01 commande FOR ou NEXT, $00 tout le reste
		si type == $02:
		si type == $03:
	_token: token instruction
        _token2: paramètre du token
	_len: longueur de nom + $07
	_nfa: nom de l'instruction
		_xx: xx+#$80
		_lencfa: longueur du code assembleur à copier
		ou
		_xx: n octets???
	_cfa: code de l'instruction

_xx: $80, $83 -> compile un jmp xxx ($83 = $80+3, 3=espace pour le JMP xxx)
_xx; $80, $03 -> ajoute les 3 octets suivant de la routine
_xx: $8c, $00 -> ']'
_xx: $8e, $00 -> "'"

=========

; ----------------------------------------------------------------------------
CURSOR_lfa:
        .addr   LOUT_lfa                        ; EEFA 13 EF
; ----------------------------------------------------------------------------
CURSOR_pfa:
                                                       +---+----------------------> Type et sous-type instruction
                                                       |   | +---+----------------> Token instruction
                                                       |   | |   | +--------------> Offset vers le caractère suivant le nom de l'instruction
        .byte   $01,$00,$C0,$21,$0D             ; EEFC 01 00 C0 21 0D
; ----------------------------------------------------------------------------
CURSOR:
        .byte   "CURSOR"                        ; EF01 43 55 52 53 4F 52
; ----------------------------------------------------------------------------
                                                       +--------------------------> Indique que l'instruction nécessite un paramètre SET/OFF: $90 & $1F = $10 -> n° de la routine de la table LC69C (Expect_SET_OFF)
                                                       |  +-----------------------> Longueur du code LM: $80+$03 -> compiler un JMP xxxx (ici xxxx = $EF09)
        .byte   $90,$83                         ; EF07 90 83
; ----------------------------------------------------------------------------
        ldx     #$00                            ; EF09 A2 00
        bcc     LEF10                           ; EF0B 90 03
       _XCSSCR                                  ; EF0D 00 35
        rts                                     ; EF0F 60

; ----------------------------------------------------------------------------
LEF10:
       _XCOSCR                                  ; EF10 00 34
        rts                                     ; EF12 60


=========
Table LE490:
	00,03
	06,09
	09,0C
	0F,12
	15,18
	1B,1E
	21,21
	21,21
	21,24
	27,2A
	2D,30
	33,36
	36,36
	36,39
	3C,3F
	3F,42
	42,45
	45,48
	4B,4B
	4E,52

Table LE411:
00:        jsr     LD51E                           ; E411 20 1E D5
03:        jsr     LD4D7                           ; E414 20 D7 D4
06:        jsr     LE95A                           ; E417 20 5A E9
09:        jsr     LE95F                           ; E41A 20 5F E9
0C:        jsr     LE50D                           ; E41D 20 0D E5
0F:        jsr     LE4ED                           ; E420 20 ED E4
12:        jsr     LE4C9                           ; E423 20 C9 E4
15:        jsr     LE4CF                           ; E426 20 CF E4
18:        jsr     LE4D5                           ; E429 20 D5 E4
1B:        jsr     LE4EC                           ; E42C 20 EC E4
1E:        jsr     LC1F3                           ; E42F 20 F3 C1
21:        jsr     LD28F                           ; E432 20 8F D2
24:        jsr     LF641                           ; E435 20 41 F6
27:        jsr     LF5E6                           ; E438 20 E6 F5
2A:        jsr     Get_DESALO                      ; E43B 20 FE F5
2D:        jsr     Get_FISALO                      ; E43E 20 0A F6
30:        jsr     Get_EXSALO                      ; E441 20 19 F6
33:        jsr     LF997                           ; E444 20 97 F9
36:        jsr     LE046                           ; E447 20 46 E0
39:        jsr     LEAF4                           ; E44A 20 F4 EA
3C:        jsr     LEB0A                           ; E44D 20 0A EB
3F:        jsr     LE4B9                           ; E450 20 B9 E4
42:        jsr     LE4F7                           ; E453 20 F7 E4
45:        jsr     LE517                           ; E456 20 17 E5
48:        jsr     LE51C                           ; E459 20 1C E5
4B:        jsr     LD4D7                           ; E45C 20 D7 D4

4E:        lda     #$00                            ; E45F A9 00
50:        sta     FACC1E                          ; E461 85 60
52:        lda     #$11                            ; E463 A9 11
54:        sta     L07EA+1                         ; E465 8D EB 07
57:

=========
; Paramètres de certaines instructions
InstParam_table:
00 -> B0      "SET"
01 -> B1      "OFF"
02 -> B2      "TO"
03 -> B3      "STEP"
04 -> B4      "ELSE"
05 -> B5      "THEN"
06 -> B6      "NOT"
07 -> B7      "USING"
08 -> B8      "A",$FF
09 -> B9      "TAB"
0A -> BA      "A",$FF
0B -> BB      "AUTO"

=========
Table LC69C:
        .word   LC6E6-1                         ; ":"
        .word   LC6EB-1                         ; C69E EA C6
        .word   LC70E-1                         ; C6A0 0D C7
        .word   LC95F-1                         ; C6A2 5E C9
        .word   LC73C-1                         ; C6A4 3B C7
        .word   LC747-1                         ; C6A6 46 C7
        .word   LC76C-1                         ; C6A8 6B C7
        .word   LC7A9-1                         ; C6AA A8 C7
        .word   LC7C0-1                         ; C6AC BF C7
        .word   LC7C7-1                         ; C6AE C6 C7
        .word   LC7CE-1                         ; C6B0 CD C7
        .word   LC7D5-1                         ; C6B2 D4 C7
        .word   LC7E7-1                         ; C6B4 E6 C7
        .word   LC7ED-1                         ; C6B6 EC C7
        .word   LC915-1                         ; C6B8 14 C9
        .word   LC939-1                         ; C6BA 38 C9
        .word   LC98E-1                         ; "SET"/"OFF"
        .word   LC9A4-1                         ; "TO"
        .word   LC9AE-1                         ; "STEP"
        .word   LC9B8-1                         ; "ELSE"
        .word   LC9C7-1                         ; "THEN"
        .word   LC7BB-1                         ; C6C6 BA C7
        .word   LC703-1                         ; C6C8 02 C7

=========
Messages d'erreur:
Table 1:

0 ? mode TEXT
1 ? mode HIRES
2 ? mode minitel
3 3
4 fichier absent
5 erreur d'E/S
6 fichier existant
7 disquette saturee
8 disquette protegee
9 mauvais type de fichier
10 disquette  non STRATSED
11 pas de STRATSED
12 nom de fichier incorrect
13 lecteur absent
14 fichier ouvert
15 fichier ferme
16 fin de fichier
17 mauvais type d'expression
18 valeur incorrecte
19 execution arretee
20 nombre trop grand
21 division par 0
22 LOG ou LN ou SQR ou ^ : parametre <= 0
23 mauvais NEXT
24 index de tableau trop grand
25 RETURN sans GOSUB
26 chaine trop longue
27  trop  de GOSUB

Table 2:

0 @AAttention:
1 plus de parametre
2 SET ou OFF
3 expression numerique
4 expression alphanumerique
5 No de ligne ou label
6 label
7 expression
8 "(" ?
9 ")" ?
10 "," ?
11 nombre trop grand
12 variable alphanumerique
13 variable numerique
14 variable
15 "=" ?
16 "TO" ?
17 "THEN" ?
18 "ELSE" ?
19 ?
20 caractere
21 2eme "'" ?
22 ?
23 "STEP" ?

Table 3:

0 ?
1  ligne/label
2 UNCOUNT sans COUNT
3 NEXT sans FOR
4 ? mode
5 UNTIL sans REPEAT
6  absent
7  label
8  defini plusieurs fois
9 ?
10 PASSE Ia
11 -Ib
12 -Ic
13 -II
14 WEND sans WHILE

Table 4:

0 essayez WORD,FUNCTION,ERRLIST !
1 44 Ko libres
2 @A
3  
4  (ligne
5 HYPER BASIC V2.0bGOSUBparametre(c) 1986 ORIC International


=========
AtnMsg_table
        $00: $01 -> plus de parametre
        $01: $03 -> expression numerique
        $02: $04 -> expression alphanumerique
        $03: $00 -> Attention
        $04: $07 -> expression
        $05: $0C -> variable alphanumerique
        $06: $0D -> variable numerique
        $07: $0E -> variable

        $08: $0F -> "=" ?
        $09: $0A -> "," ?
        $0A: $08 -> "(" ?
        $0B: $09 -> ")" ?
        $0C: $06 -> label
        $0D: $05 -> No de ligne ou label
        $0E: $00 -> Attention
        $0F: $00 -> Attention

        $10: $02 -> SET ou OFF
        $11: $10 -> "TO" ?
        $12: $17 -> "STEP" ?
        $13: $12 -> "ELSE" ?
        $14: $11 -> "THEN" ?
        $15: $15 -> 2eme "'" ?
        $16: $00 -> Attention
        $17: $00 -> Attention

        $18: $0B -> nombre trop grand
        $19: $02 -> SET ou OFF
        $1A: $16 -> ?
        $1B: $14 -> caractere

